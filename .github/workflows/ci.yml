name: ci

on: [push, pull_request]

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_config:
          - { compiler: gcc, version: 12 }
          - { compiler: gcc, version: 11 }
          - { compiler: gcc, version: 10 }
          - { compiler: gcc, version: 9 }
          - { compiler: gcc, version: 8 }
          - { compiler: gcc, version: 7 }
          - { compiler: gcc, version: 6 }
          - { compiler: gcc, version: 5 }
          - { compiler: clang, version: 14 }
          - { compiler: clang, version: 13 }
          - { compiler: clang, version: 12 }
          - { compiler: clang, version: 11 }
          - { compiler: clang, version: 10 }
          - { compiler: clang, version: 9 }
          - { compiler: gcc, version: 10, args: "-DDEFLATE_SUPPORT=OFF" }
    container:
      image: ${{ matrix.build_config.compiler == 'clang' && 'teeks99/clang-ubuntu' || matrix.build_config.compiler }}:${{ matrix.build_config.version }}
    env:
      JOBS: 2
      CMAKE_VERSION: "3.24.1"
    name: "${{ matrix.build_config.compiler }}-${{ matrix.build_config.version }} ${{ matrix.build_config.args }}"
    steps:
      - uses: actions/checkout@main
      - name: Setup Clang
        if: matrix.build_config.compiler == 'clang'
        run: |
          scripts/ci_setup_clang.sh ${{ matrix.build_config.version }}
          echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          echo "CC=clang-${{ matrix.build_config.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.build_config.version }}" >> $GITHUB_ENV
      - name: Setup
        run: |
          apt-get update && apt-get install -y valgrind zlib1g-dev git curl
          curl -sSL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh -o install-cmake.sh
          chmod +x install-cmake.sh
          ./install-cmake.sh --prefix=/usr/local --skip-license
      - name: Build
        run: |
          cmake . -Bbuild -DCMAKE_BUILD_TYPE=Release -DCOVERAGE=ON ${{ matrix.build_config.args }}
          cmake --build build -- -j${JOBS}
      - name: Test
        run: |
          cd build
          cmake --build . --target test
          ctest -D ExperimentalBuild -j${JOBS}
          ctest -D ExperimentalMemCheck -j${JOBS}
      - name: CodeCov
        uses: codecov/codecov-action@v3
        with:
          gcov: true
  build_msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        build_config:
          - {args: "-DDEFLATE_SUPPORT=OFF", config: "Debug"}
    steps:
      - uses: actions/checkout@main
      - name: Build
        run: |
            cmake . -Bbuild ${{ matrix.build_config.args }}
            cmake --build build --parallel --config ${{ matrix.build_config.config }}
      - name: Test
        run: |
            cd build
            ctest -C ${{ matrix.build_config.config }}
